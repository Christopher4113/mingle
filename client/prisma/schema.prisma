// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String    @id @default(cuid())
  username        String?   @unique
  password        String?
  createdAt       DateTime  @default(now())
  updateAt        DateTime  @updatedAt
  name            String?
  email           String?   @unique
  emailVerified   DateTime? @map("email_verified")
  image           String?
  profileImageUrl String?
  bio             String?
  location        String?
  interests       String[]
  connections     Int       @default(0)
  events          Int       @default(0)
  accounts        Account[]
  sessions        Session[]
  createdEvents   Event[]
  EventAttendee EventAttendee[]
  @@map("users")
  
}

model Event {
  id           String   @id @default(cuid())
  title        String
  description  String
  startsAt     DateTime
  endsAt       DateTime
  location     String
  category     String
  attendees    Int      @default(0)
  maxAttendees Int
  inviteOnly   Boolean  @default(false)

  userId  String
  creator User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  EventAttendee EventAttendee[]
  @@index([userId])
  
}

model EventAttendee {
  id        String   @id @default(cuid())
  eventId   String   @map("event_id")
  userId    String   @map("user_id")
  profile   String
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId])
  @@map("event_attendees")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
